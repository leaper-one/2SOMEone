// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package user

import (
	"context"

	"github.com/leaper-one/2SOMEone/rpc/user-rpc/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BasicUser               = user.BasicUser
	GetMeRequest            = user.GetMeRequest
	GetMeResponse           = user.GetMeResponse
	GetUserIDByBuidRequest  = user.GetUserIDByBuidRequest
	GetUserIDByBuidResponse = user.GetUserIDByBuidResponse
	SetInfoRequest          = user.SetInfoRequest
	SetInfoResponse         = user.SetInfoResponse
	SignInByPhoneRequest    = user.SignInByPhoneRequest
	SignInByPhoneResponse   = user.SignInByPhoneResponse
	SignUpByPhoneRequest    = user.SignUpByPhoneRequest
	SignUpByPhoneResponse   = user.SignUpByPhoneResponse
	UserInfo                = user.UserInfo

	User interface {
		//  通过手机号注册，需要验证码
		SignUpByPhone(ctx context.Context, in *SignUpByPhoneRequest, opts ...grpc.CallOption) (*SignUpByPhoneResponse, error)
		//  通过手机号登录
		SignInByPhone(ctx context.Context, in *SignInByPhoneRequest, opts ...grpc.CallOption) (*SignInByPhoneResponse, error)
		//  Get current user infomation by metadata with auth token
		GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error)
		//  jwt needed in metadata
		SetInfo(ctx context.Context, in *SetInfoRequest, opts ...grpc.CallOption) (*SetInfoResponse, error)
		//  根据 buid 获取 user_id
		GetUserIDByBuid(ctx context.Context, in *GetUserIDByBuidRequest, opts ...grpc.CallOption) (*GetUserIDByBuidResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

//  通过手机号注册，需要验证码
func (m *defaultUser) SignUpByPhone(ctx context.Context, in *SignUpByPhoneRequest, opts ...grpc.CallOption) (*SignUpByPhoneResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SignUpByPhone(ctx, in, opts...)
}

//  通过手机号登录
func (m *defaultUser) SignInByPhone(ctx context.Context, in *SignInByPhoneRequest, opts ...grpc.CallOption) (*SignInByPhoneResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SignInByPhone(ctx, in, opts...)
}

//  Get current user infomation by metadata with auth token
func (m *defaultUser) GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetMe(ctx, in, opts...)
}

//  jwt needed in metadata
func (m *defaultUser) SetInfo(ctx context.Context, in *SetInfoRequest, opts ...grpc.CallOption) (*SetInfoResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SetInfo(ctx, in, opts...)
}

//  根据 buid 获取 user_id
func (m *defaultUser) GetUserIDByBuid(ctx context.Context, in *GetUserIDByBuidRequest, opts ...grpc.CallOption) (*GetUserIDByBuidResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserIDByBuid(ctx, in, opts...)
}
